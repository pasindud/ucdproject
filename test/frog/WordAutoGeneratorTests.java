/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frog;

import java.util.List;
import org.apache.commons.lang3.StringUtils;
import org.junit.Assert;
import org.junit.Test;

/**
 *
 * @author DILSHAN FERNANDO
 */
public class WordAutoGeneratorTests {

    @Test
    public void testGetAutoGeneratedWord() {
        String c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12;
        c1 = "A";
        c2 = "E";
        c3 = "A";
        c4 = "G";
        c5 = "D";
        c6 = "E";
        c7 = "F";
        c8 = "T";
        c9 = "K";
        c10 = "R";
        c11 = "S";
        c12 = "B";

        String z = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 + c10 + c11 + c12;

        int c1_count = StringUtils.countMatches(z, c1);
        int c2_count = StringUtils.countMatches(z, c2);
        int c3_count = StringUtils.countMatches(z, c3);
        int c4_count = StringUtils.countMatches(z, c4);
        int c5_count = StringUtils.countMatches(z, c5);
        int c6_count = StringUtils.countMatches(z, c6);
        int c7_count = StringUtils.countMatches(z, c7);
        int c8_count = StringUtils.countMatches(z, c8);
        int c9_count = StringUtils.countMatches(z, c9);
        int c10_count = StringUtils.countMatches(z, c10);
        int c11_count = StringUtils.countMatches(z, c11);
        int c12_count = StringUtils.countMatches(z, c12);

        WordAutoGenerator ag = new WordAutoGenerator(c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12);
        String result = ag.getLongestWord();

        Assert.assertTrue(result.length() <= 12);
        
        Assert.assertTrue((StringUtils.countMatches(result, c1) <= c1_count));
        Assert.assertTrue((StringUtils.countMatches(result, c2) <= c2_count));
        Assert.assertTrue((StringUtils.countMatches(result, c3) <= c3_count));
        Assert.assertTrue((StringUtils.countMatches(result, c4) <= c4_count));
        Assert.assertTrue((StringUtils.countMatches(result, c5) <= c5_count));
        Assert.assertTrue((StringUtils.countMatches(result, c6) <= c6_count));
        Assert.assertTrue((StringUtils.countMatches(result, c7) <= c7_count));
        Assert.assertTrue((StringUtils.countMatches(result, c8) <= c8_count));
        Assert.assertTrue((StringUtils.countMatches(result, c9) <= c9_count));
        Assert.assertTrue((StringUtils.countMatches(result, c10) <= c10_count));
        Assert.assertTrue((StringUtils.countMatches(result, c11) <= c11_count));
        Assert.assertTrue((StringUtils.countMatches(result, c12) <= c12_count));

    }

}
